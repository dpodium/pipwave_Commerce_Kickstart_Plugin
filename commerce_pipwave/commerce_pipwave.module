<?php

/**
 * @file
 * Implements pipwave payment services for use with Drupal Commerce.
 */

/**
 * Implements hook_permission().
 */
function commerce_pipwave_permission() {
    return array(
        'administer commerce pipwave' => array(
            'title' => t('Administer Commerce pipwave'),
            'description' => t('Perform administration tasks for Commerce pipwave gateway.'),
        ),
    );
}

/**
 * Implements hook_menu().
 */
function commerce_pipwave_menu() {
    $items = array(
        'admin/commerce/config/pipwave' => array(
            'title' => 'pipwave Settings',
            'description' => 'pipwave API settings.',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('commerce_pipwave_admin_form'),
            'access arguments' => array('administer commerce pipwave'),
        ),
        'admin/commerce/callback' => array(
            'title' => 'callback',
            'page callback' => 'commerce_pipwave_callback',
            'access callback' => TRUE,
            'type' => MENU_CALLBACK
        )
    );

    return $items;
}

/**
 * Commerce pipwave admin form.
 *
 * @todo Add configuration to select available payment methods and currency.
 */
function commerce_pipwave_admin_form($form, &$form_state) {
    $form['merchant']['pipwave_logo'] = array(
        '#markup' => l(theme_image(array(
            'path' => drupal_get_path('module', 'commerce_pipwave') . '/images/pipwave-logo.png',
            'alt' => t('pipwave - Simple, reliable, and cost-effective way to accept payments online.'),
            'title' => t('pipwave - Simple, reliable, and cost-effective way to accept payments online.'),
            'attributes' => array(),
                )), 'https://www.pipwave.com', array('html' => TRUE, 'attributes' => array('target' => '_blank', 'style' => 'display: block; margin-bottom: 10px;'))
        ),
    );
    $form['merchant']['api_key'] = array(
        '#type' => 'textfield',
        '#title' => t('API Key'),
        '#size' => 64,
        '#maxlength' => 64,
        '#required' => TRUE,
        '#default_value' => variable_get('commerce_pipwave_api_key'),
        '#description' => t("API Key provided by pipwave in <a href='https://merchant.pipwave.com/development-setting/index' target='_blank'>Development > Setting</a>", array('html' => true))
    );
    $form['merchant']['api_secret'] = array(
        '#type' => 'textfield',
        '#title' => t('API Secret'),
        '#size' => 64,
        '#maxlength' => 64,
        '#required' => TRUE,
        '#default_value' => variable_get('commerce_pipwave_api_secret'),
        '#description' => t("API Secret provided by pipwave in <a href='https://merchant.pipwave.com/development-setting/index' target='_blank'>Development > Setting</a>", array('html' => true))
    );
    $form["merchant"]["mode"] = array(
        '#type' => 'checkbox',
        '#title' => 'Enable test mode',
        '#default_value' => variable_get('commerce_pipwave_test_mode'),
    );
    $form["merchant"]["processing_fee_group"] = array(
        '#type' => 'textfield',
        '#title' => t('Payment Processing Fee Group Reference ID'),
        '#size' => 64,
        '#maxlength' => 64,
        '#default_value' => variable_get('commerce_pipwave_surcharge_group'),
        '#description' => t("Payment Processing Fee Group configured in pipwave <a href='https://merchant.pipwave.com/account/set-processing-fee-group#general-processing-fee-group' target='_blank'>Account > General</a>.<br>Processing fee will be applied on all customers once this setting is configured.", array(
            'html' => true
        )),
    );

    $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));

    return $form;
}

function commerce_pipwave_admin_form_submit($form, &$form_state) {
    $values = $form_state['values'];
    // Save settings into variable table.
    variable_set('commerce_pipwave_api_key', $values['api_key']);
    variable_set('commerce_pipwave_api_secret', $values['api_secret']);
    variable_set('commerce_pipwave_test_mode', $values['mode']);
    variable_set('commerce_pipwave_surcharge_group', $values['processing_fee_group']);
    //Display messagge
    drupal_set_message(t('Settings has been done.'));
}

/**
 * Implements hook_commerce_payment_method_info().
 *
 * @todo Allow terminal payment.
 */
function commerce_pipwave_commerce_payment_method_info() {
    $payment_methods = array();
    $payment_methods['commerce_pipwave'] = array(
        'title' => t('pipwave'),
        'description' => t('Pay via pipwave.'),
        'terminal' => FALSE,
        'active' => TRUE,
        'offsite' => TRUE,
    );

    return $payment_methods;
}

/**
 * Payment method callback: submit form.
 */
function commerce_pipwave_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
    // Unset all previous orders from session.
    drupal_session_start();
    unset($_SESSION['commerce_pipwave']);

    $form = array();
    // Fetch list of enabled payment methods from pipwave api
    $form['pipwave_logo'] = array(
        '#markup' => l(
                theme_image(array(
            'path' => drupal_get_path('module', 'commerce_pipwave') . '/images/pipwave-logo.png',
            'alt' => t('pipwave - Simple, reliable, and cost-effective way to accept payments online.'),
            'title' => t('pipwave - Simple, reliable, and cost-effective way to accept payments online.'),
                )), 'https://www.pipwave.com', array('html' => TRUE, 'attributes' => array('target' => '_blank', 'style' => 'display: block; margin: 10px 0;'))
        ),
    );

    $form['pipwave_message'] = array(
        "#markup" => "Press <strong>Continue to next step</strong> to make payment via pipwave."
    );

    return $form;
}

/**
 * Implements hook_redirect_form().
 */
function commerce_pipwave_redirect_form($form, &$form_state, $order, $payment_method) {
    if (variable_get("commerce_pipwave_api_key") == null || variable_get("commerce_pipwave_api_secret") == null) {
        drupal_set_message(t('Missing pipwave API Key or API Secret. Kindly check your pipwave setting.'), 'error');
        return array();
    }
    $settings = array(
        'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
        'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
        'callback' => url('admin/commerce/callback', array('absolute' => TRUE)),
        'payment_method' => $payment_method['instance_id'],
    );
    return commerce_pipwave_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

function commerce_pipwave_order_form($form, &$form_state, $order, $settings) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $currency_code = $wrapper->commerce_order_total->currency_code->value();
    $amount = number_format(commerce_currency_amount_to_decimal($order->commerce_order_total[LANGUAGE_NONE][0]['amount'], $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code']), 2, '.', '');
    global $language;
    $shipping_amount = 0;
    $discount_amount = 0;
    if (isset($order->commerce_order_total[LANGUAGE_NONE][0]['data']['components'])) {
        foreach($order->commerce_order_total[LANGUAGE_NONE][0]['data']['components'] as $component) {
            if ($component['name'] == 'flat_rate_express_shipping') {
                $shipping_amount = number_format($shipping_amount + number_format(commerce_currency_amount_to_decimal($component['price']['amount'], $component['price']['currency_code']), 2), 2, '.', '');
            } else if (strpos($component['name'], 'discount|') === 0) {
                $discount_amount = number_format($discount_amount + number_format(commerce_currency_amount_to_decimal($component['price']['amount'], $component['price']['currency_code']), 2), 2, '.', '');
            }
        }
    }
    $data = array(
        'action' => 'initiate-payment',
        'timestamp' => time(),
        'api_key' => variable_get('commerce_pipwave_api_key'),
        'txn_id' => $order->order_number . "",
        'amount' => $amount,
        'shipping_amount' => $shipping_amount,
        'handling_amount' => $discount_amount,
        'currency_code' => $currency_code,
        'short_description' => 'Payment for Order#' . $order->order_number,
        'session_info' => array(
            'ip_address' => $order->revision_hostname,
            'language' => isset($language->language) ? $language->language : ''
        ),
        'api_override' => array(
            'success_url' => $settings['return'],
            'fail_url' => $settings['cancel_return'],
            'notification_url' => $settings['callback']
        ),
        'buyer_info' => array(
            'id' => $order->uid,
            'email' => $order->mail,
            'surcharge_group' => variable_get('commerce_pipwave_surcharge_group')
        ),
        'tax_exempted_amount' => $amount
    );
    module_load_include('inc', 'addressfield', 'addressfield.administrative_areas');
    module_load_include('inc', 'locale', 'locale');
    $countries = country_get_list();
    if (isset($order->commerce_customer_billing[LANGUAGE_NONE][0])) {
        $billing_address = entity_metadata_wrapper('commerce_order', $order)->commerce_customer_billing->commerce_customer_address->value();
        $administrative_areas = addressfield_get_administrative_areas($billing_address['country']);
        $data['billing_info'] = array(
            'name' => $billing_address['name_line'],
            'address1' => $billing_address['thoroughfare'],
            'address2' => $billing_address['premise'],
            'city' => $billing_address['locality'],
            'state' => isset($administrative_areas[$billing_address['administrative_area']]) ? $administrative_areas[$billing_address['administrative_area']] : '',
            'zip' => $billing_address['postal_code'],
            'country' => isset($countries[$billing_address['country']]) ? $countries[$billing_address['country']] : '',
            'country_iso2' => $billing_address['country']
        );
        $data['buyer_info']['first_name'] = $billing_address['first_name'];
        $data['buyer_info']['last_name'] = $billing_address['last_name'];
        $data['buyer_info']['country_code'] = $billing_address['country'];
    }
    $shipping_address = "";
    if (isset($order->commerce_customer_shipping[LANGUAGE_NONE][0])) {
        $shipping_address = entity_metadata_wrapper('commerce_order', $order)->commerce_customer_shipping->commerce_customer_address->value();
        $administrative_areas = addressfield_get_administrative_areas($shipping_address['country']);
        $data['shipping_info'] = array(
            'name' => $shipping_address['name_line'],
            'address1' => $shipping_address['thoroughfare'],
            'address2' => $shipping_address['premise'],
            'city' => $shipping_address['locality'],
            'state' => isset($administrative_areas[$shipping_address['administrative_area']]) ? $administrative_areas[$shipping_address['administrative_area']] : '',
            'zip' => $shipping_address['postal_code'],
            'country' => isset($countries[$shipping_address['country']]) ? $countries[$shipping_address['country']] : '',
            'country_iso2' => $shipping_address['country']
        );
    }
    //get product details
    foreach ($order->commerce_line_items[LANGUAGE_NONE] as $line) {
        $line_item = commerce_line_item_load($line['line_item_id']);
        if (isset($line_item->commerce_product[LANGUAGE_NONE][0]['product_id'])) {
            $product = commerce_product_load($line_item->commerce_product[LANGUAGE_NONE][0]['product_id']);
            if ($product) {
                $data['item_info'][] = array(
                    "name" => $product->title,
                    "description" => $product->title . ' x ' . $line_item->quantity,
                    "amount" => number_format(commerce_currency_amount_to_decimal($line_item->commerce_unit_price[LANGUAGE_NONE][0]['amount'], $line_item->commerce_unit_price[LANGUAGE_NONE][0]['currency_code']), 2, '.', ''),
                    "currency_code" => $line_item->commerce_unit_price[LANGUAGE_NONE][0]['currency_code'],
                    "quantity" => $line_item->quantity,
                    "sku" => $product->sku
                );
            }
        }
    }
    $signature_param = array(
        'api_key' => variable_get('commerce_pipwave_api_key'),
        'api_secret' => variable_get('commerce_pipwave_api_secret'),
        'txn_id' => $data['txn_id'],
        'amount' => $data['amount'],
        'currency_code' => $data['currency_code'],
        'action' => $data['action'],
        'timestamp' => $data['timestamp']
    );
    $data['signature'] = commerce_pipwave_generate_signature($signature_param);
    $response = commerce_pipwave_send_request($data, variable_get('commerce_pipwave_test_mode'));
    if ($response['status'] == 200) {
        $api_data = json_encode([
            'api_key' => variable_get('commerce_pipwave_api_key'),
            'token' => $response['token'],
        ]);
        $sdk_url = (variable_get('commerce_pipwave_test_mode') == '1') ? '//staging-checkout.pipwave.com/sdk/' : '//secure.pipwave.com/sdk/';
        $loading_img = (variable_get('commerce_pipwave_test_mode') == '1') ? '//staging-checkout.pipwave.com/images/loading.gif' : '//secure.pipwave.com/images/loading.gif';
        $form['payment_method'] = array(
            '#markup' =>
            '<div id="pwscript" class="text-center"></div>
                    <div id="pwloading" style="text-align: center;">
                        <img src="' . $loading_img . '" />
                    </div>
                    <script type="text/javascript">
                        var pwconfig = ' . $api_data . ';
                        (function (_, p, w, s, d, k) {
                            var a = _.createElement("script");
                            a.setAttribute("src", w + d);
                            a.setAttribute("id", k);
                            setTimeout(function() {
                                var reqPwInit = (typeof reqPipwave != "undefined");
                                if (reqPwInit) {
                                    reqPipwave.require(["pw"], function(pw) {
                                        pw.setOpt(pwconfig);
                                        pw.startLoad();
                                    });
                                } else {
                                    _.getElementById(k).parentNode.replaceChild(a, _.getElementById(k));
                                }
                            }, 800);
                        })(document, "script", "' . $sdk_url . '", "pw.sdk.min.js", "pw.sdk.min.js", "pwscript");
        </script>');
    } else {
        $form['payment_method'] = array(
            '#markup' => isset($response['message']) ? (is_array($response['message']) ? implode('; ', $response['message']) : $response['message']) : "Error occured",
        );
    }

    return $form;
}

function commerce_pipwave_redirect_form_validate($order, $payment_method) {
    commerce_checkout_complete($order);
}

function commerce_pipwave_update_transaction($order, $payment_method, $response) {
    $transaction = commerce_payment_transaction_new('commerce_pipwave', $response['txn_id']);
    $transaction->instance_id = $payment_method['instance_id'];
    $transaction->currency_code = $response["currency_code"];
    $transaction->amount = commerce_currency_decimal_to_amount($response['amount'], $response["currency_code"]);
    $transaction->remote_id = $response["pw_id"];
    $transaction->status_code = $response["transaction_status"];
    // pipwave risk execution result
    $pipwave_score = isset($response['pipwave_score']) ? $response['pipwave_score'] : '';
    $rule_action = isset($response['rules_action']) ? $response['rules_action'] : '';
    $response_message = isset($response['message']) ? $response['message'] : '';

    $signature_param = array(
        'timestamp' => $response['timestamp'],
        'api_key' => variable_get("commerce_pipwave_api_key"),
        'pw_id' => $response['pw_id'],
        'txn_id' => $response['txn_id'],
        'amount' => $response['amount'],
        'currency_code' => $response['currency_code'],
        'transaction_status' => $response['transaction_status'],
        'api_secret' => variable_get('commerce_pipwave_api_secret'),
    );
    $generatedSignature = commerce_pipwave_generate_signature($signature_param);
    $message = array();
    if (isset($response['payment_method_title'])) {
        $message[] = sprintf("Paid with: %s - pipwave", $response['payment_method_title']);
    }
    $message[] = "pipwave Transaction ID: {$response["pw_id"]}";
    if ($response['signature'] != $generatedSignature) {
        $transaction_status = -1;
    }

    $order_status = commerce_pipwave_get_order_status($response['transaction_status'], $response['status']);
    $message[] = $order_status['message'];
    $transaction->status = $order_status['txn_status'];
    $transaction->remote_status = $order_status['remote_status'];
    if ($transaction_status != -1) {
        if ($order) {
            if (in_array($transaction_status, array(10, 20, 25))) {
                $message[] = sprintf("Currency: %s", $transaction->currency_code);
                $message[] = sprintf("Final Amount: %s", $transaction->amount);
            }
            if ($transaction->amount != $order->commerce_order_total[LANGUAGE_NONE][0]['amount']) {
                $message[] = "Amount mismatch";
            }
            if ($transaction->currency_code != $order->commerce_order_total['und'][0]['currency_code']) {
                $message[] = "Currency mismatch";
            }
            if (!empty($rule_action) && !empty($pipwave_score)) {
                $message[] = sprintf("Rule Action: %s", $rule_action);
                $message[] = sprintf("pipwave Score: %s", $pipwave_score);
            }
            if (!empty($response_message)) {
                $message[] = sprintf("pipwave Message: %s", $response_message);
            }
            if (!empty($order_status['order_status'])) {
                commerce_order_status_update($order, $order_status['order_status']);
            }
            commerce_order_save($order);
        } else {
            $message[] = "Invalid order";
        }
    }
    $transaction->message = implode("<br>", $message);
    commerce_payment_transaction_save($transaction);
}

function commerce_pipwave_get_order_status($transaction_status, $api_status) {
    $with_warning_msg = ($api_status == 3001) ? " (with warning)" : '';
    $txn_status = COMMERCE_PAYMENT_STATUS_PENDING;
    $remote_status = '';
    $order_status = '';
    switch ($transaction_status) {
        case 5: // pending
            $note = t("Payment Status: Pending$with_warning_msg");
            break;
        case 1: // failed
            $note = t("Payment Status: Failed$with_warning_msg");
            $txn_status = COMMERCE_PAYMENT_STATUS_FAILURE;
            $remote_status = 'Failed';
            $order_status = 'canceled';
            break;
        case 2: // cancelled
            $note = t("Payment Status: Cancelled$with_warning_msg");
            $txn_status = COMMERCE_PAYMENT_STATUS_FAILURE;
            $remote_status = 'Cancelled';
            $order_status = 'canceled';
            break;
        case 10: // complete
            $note = t("Payment Status: Completed$with_warning_msg");
            $txn_status = COMMERCE_PAYMENT_STATUS_SUCCESS;
            $remote_status = 'Completed';
            $order_status = 'processing';
            break;
        case 20: // refunded
            $note = t("Payment Status: Refunded$with_warning_msg");
            $txn_status = COMMERCE_PAYMENT_STATUS_SUCCESS;
            $remote_status = 'Refunded';
            $order_status = 'completed';
            break;
        case 25: // partial refunded
            $note = t("Payment Status: Partial Refunded$with_warning_msg");
            $txn_status = COMMERCE_PAYMENT_STATUS_SUCCESS;
            $remote_status = 'Partial Refunded';
            $order_status = 'completed';
            break;
        case -1: // signature mismatch
            $note = t("Signature mismatch");
            break;
        default:
            $note = t("Unknown payment status");
    }

    return array('message' => $note, 'txn_status' => $txn_status, 'remote_status' => $remote_status, 'order_status' => $order_status);
}

function commerce_pipwave_callback() {
    header('HTTP/1.1 200 OK');
    echo "OK";
    $post_content = file_get_contents("php://input");
    $response = json_decode($post_content, true);
    if (!$response) {
        exit;
    }
    $order = commerce_order_load_by_number($response['txn_id']);
    $payment_method = commerce_payment_method_instance_load('pipwave|commerce_payment_commerce_pipwave');
    commerce_pipwave_update_transaction($order, $payment_method, $response);
}

function commerce_pipwave_send_request($data, $commerce_pipwave_test_mode) {
    // test mode is on
    if ($commerce_pipwave_test_mode == '1') {
        $url = "https://staging-api.pipwave.com/payment";
    } else {
        $url = "https://api.pipwave.com/payment";
    }

    $agent = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)";
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('x-api-key:' . variable_get('commerce_pipwave_api_key')));
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_VERBOSE, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
    curl_setopt($ch, CURLOPT_TIMEOUT, 120);
    curl_setopt($ch, CURLOPT_USERAGENT, $agent);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    $response = curl_exec($ch);
    if ($response == false) {
        echo "<pre>";
        echo 'CURL ERROR: ' . curl_errno($ch) . '::' . curl_error($ch);
        die;
    }
    curl_close($ch);
    return json_decode($response, true);
}

function commerce_pipwave_generate_signature($array) {
    ksort($array);
    $signature = "";
    foreach ($array as $key => $value) {
        $signature .= $key . ':' . $value;
    }
    return sha1($signature);
}
